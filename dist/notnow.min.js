/*! https://github.com/leeoniya/notnow (v0.1.0) */
!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(e=e||self).notnow=n()}(this,function(){"use strict";return function(e){var n=(e=e||{}).target||document.body,t="."+(e.class||"lazy"),o=e.mutations||!1,r=e.willLoad,i="threshold"in e?e.threshold:"200px 0%",a=["srcset","src","poster"],c=window,s="IntersectionObserver",u=s+"Entry",f=s in c&&u in c&&"isIntersecting"in c[u].prototype;function d(e,n){return n.querySelectorAll(e)}var l=new Set,h=new Set;if(d(t,n).forEach(function(e){return l.add(e)}),f&&!/baidu|(?:google|bing|yandex|duckduck)bot/i.test(navigator.userAgent)){var g=new c[s](function(e){e.forEach(function(e){if(e.isIntersecting){var n=e.target;b(n),y(n),0!=!l.size||o||g.disconnect()}})},{rootMargin:i});l.forEach(m),o&&new MutationObserver(function(){d(t,n).forEach(function(e){h.has(e)||l.has(e)||(l.add(e),m(e))}),h.forEach(function(e){var t;(t=e)==n||n.contains(t)||(h.remove(e),y(e))})}).observe(n,{childList:!0,subtree:!0})}else l.forEach(b);function b(e){if(r&&r(e),e.dataset.bg)e.style.backgroundImage="url("+e.dataset.bg+")";else{v(e);var n=e.nodeName;"PICTURE"!=n&&"VIDEO"!=n||d("source, img",e).forEach(v),e.autoplay&&c.requestAnimationFrame(function(){return e.load()})}l.delete(e),h.add(e)}function v(e){a.forEach(function(n){n in e.dataset&&(e[n]=e.dataset[n])})}function m(e){g.observe(e)}function y(e){g.unobserve(e)}}});
