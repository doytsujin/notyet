/*! https://github.com/leeoniya/notyet (v0.1.0) */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).notyet=t()}(this,function(){"use strict";return function(e){var t=(e=e||{}).target||document.body,n="."+(e.class||"lazy"),o=e.mutations||!1,i=e.willLoad,r=e.threshold||"200px",a=["srcset","src","poster"],c=window,s="IntersectionObserver",u=s+"Entry",f=s in c&&u in c&&"isIntersecting"in c[u].prototype;function d(e,t){return t.querySelectorAll(e)}var l=new Set,g=new Set;if(d(n,t).forEach(function(e){l.add(e)}),f&&!/baidu|(?:google|bing|yandex|duckduck)bot/i.test(navigator.userAgent)){var b=new c[s](function(e){e.forEach(function(e){if(e.isIntersecting){var t=e.target;h(t),m(t),l.size||o||b.disconnect()}})},{rootMargin:r});l.forEach(y),o&&new MutationObserver(function(){d(n,t).forEach(function(e){g.has(e)||l.has(e)||(l.add(e),y(e))}),g.forEach(function(e){var n;(n=e)==t||t.contains(n)||(g.remove(e),m(e))})}).observe(t,{childList:!0,subtree:!0})}else l.forEach(h);function h(e){if(i&&i(e),e.dataset.bg)e.style.backgroundImage="url("+e.dataset.bg+")";else{v(e);var t=e.nodeName;"PICTURE"!=t&&"VIDEO"!=t||d("source, img",e).forEach(v),e.autoplay&&c.requestAnimationFrame(function(){e.load()})}l.delete(e),g.add(e)}function v(e){a.forEach(function(t){t in e.dataset&&(e[t]=e.dataset[t])})}function y(e){b.observe(e)}function m(e){b.unobserve(e)}}});
